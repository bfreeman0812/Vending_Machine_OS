#include <iostream>
#include <stdio.h>
#include <string>
#include <fstream>
#include <iomanip>
#include <math.h>
#include <stdlib.h>
#include <sstream>

using namespace std;

class ServiceMode {
public:
	int numberOfFaygo = 0;
	int numberOfCoke = 0;
	int numberOfPepsi = 0;
	int numberOfRC = 0;
	int numberOfJolt = 0;
	string add = "";
	string add2 = "";
	string addcmd1;
	string mode;
	int addcmd2 = 0;
	int colaCupInput = 0;
	int cupQuantity = 0;
	float totalMoneyAmount = 0;
	int numberOneDollarBills = 0;
	int numberFiveDollarBills = 0;
	int numberNickels = 0;
	int numberDimes = 0;
	int numberQuarters = 0;
	int tempCupQuantity = 0;


	void printStart() { //starting command line for the program
		cout << "\nPlease Enter a command and its parameter\n(type Help for a list of commands, EXIT to Quit)";
		cout << "\n[SERVICE MODE]>";

		return;
	}
	void helpCommand() { //displays all commands for service mode
		cout << "Commands in Service Mode are:\n";
		cout << "Status";
		cout << "\nAdd [COLA|CUPS] brand <quantity>\n";
		cout << "Add|Remove [Coins|Bills] <denomination> <quantity>";
		cout << "\nExit\n";
		cout << "Lock [password]\n";
		return;
	}
	void statusCommand() { //prints out the total amount of money in the machine as well as the amount of each soda, cups, coin, and bill.
		totalMoneyAmount = (numberNickels * .05) + (numberDimes * .1) + (numberQuarters * .25) + (numberFiveDollarBills * 5.00) + (numberOneDollarBills * 1.00);
		cout << "\nAmount Deposited= " << totalMoneyAmount;
		cout << "\ntotal One Dollar Bills= " << numberOneDollarBills;
		cout << "\ntotal Five Dollar Bills= " << numberFiveDollarBills;
		cout << "\ntotal Nickels= " << numberNickels;
		cout << "\ntotal Dimes= " << numberDimes;
		cout << "\ntotal Quarters= " << numberQuarters;
		cout << "\ntotal Coke= " << numberOfCoke;
		cout << "\ntotal Pepsi= " << numberOfPepsi;
		cout << "\ntotal RC= " << numberOfRC;
		cout << "\ntotal Jolt= " << numberOfJolt;
		cout << "\ntotal Faygo= " << numberOfFaygo;
		cout << "\ntotal Cups= " << cupQuantity << "\n";

	}
	void addCommand(string cmd2) { // function which adds soda, cups, coins, and bills

		if (cmd2 == "COLA" || cmd2 == "Cola" || cmd2 == "cola") {
			cout << "\nEnter the brand and number of cans to add in the form, brand <number>\n";
			getline(cin, add);
			istringstream ss(add);

			ss >> addcmd1 >> addcmd2;


			if (addcmd1 == "pepsi" || addcmd1 == "PEPSI" || addcmd1 == "Pepsi") {
				numberOfPepsi = addcmd2 + numberOfPepsi;
			}
			else if (addcmd1 == "jolt" || addcmd1 == "Jolt" || addcmd1 == "JOLT") {
				numberOfJolt = addcmd2 + numberOfJolt;
			}
			else if (addcmd1 == "coke" || addcmd1 == "COKE" || addcmd1 == "Coke") {
				numberOfCoke = addcmd2 + numberOfCoke;
			}
			else if (addcmd1 == "rc" || addcmd1 == "RC") {
				numberOfRC = addcmd2 + numberOfRC;
			}
			else if (addcmd1 == "faygo" || addcmd1 == "Faygo" || addcmd1 == "FAYGO") {
				numberOfFaygo = addcmd2 + numberOfFaygo;
			}
			else {
				cout << "Invalid brand of cola, try again\n";
			}

		}
		else if (cmd2 == "CUPS" || cmd2 == "cups" || cmd2 == "Cups") {
			cout << "Enter the quantity of cups being added> ";
			cin >> tempCupQuantity;
			cin.get();
			cupQuantity += tempCupQuantity;

		}
		else if (cmd2 == "BILLS" || cmd2 == "Bills" || cmd2 == "bills") {
			cout << "Enter type and amount of bills in the form, <denomination> <quantity>\n";
			getline(cin, add);
			istringstream ss(add);
			ss >> addcmd1 >> addcmd2;

			if (addcmd1 == "five" || addcmd1 == "5") {
				numberFiveDollarBills = addcmd2 + numberFiveDollarBills;
			}
			else if (addcmd1 == "one" || addcmd1 == "1") {
				numberOneDollarBills = addcmd2 + numberOneDollarBills;
			}
			else {
				cout << "Invalid bill type, try again";
			}


		}
		else if (cmd2 == "COINS" || cmd2 == "Coins" || cmd2 == "coins") {
			cout << "Enter type and amount of coins in the form, <denomination> <quantity>\n";
			getline(cin, add);
			istringstream ss(add);
			ss >> addcmd1 >> addcmd2;

			if (addcmd1 == "nickel" || addcmd1 == "Nickel" || addcmd1 == "NICKEL" || addcmd1 == "5") {
				numberNickels = addcmd2 + numberNickels;
			}
			else if (addcmd1 == "dime" || addcmd1 == "DIME" || addcmd1 == "Dime" || addcmd1 == "10") {
				numberDimes = addcmd2 + numberDimes;
			}
			else if (addcmd1 == "quarter" || addcmd1 == "Quarter" || addcmd1 == "QUARTER" || addcmd1 == "25") {
				numberQuarters = addcmd2 + numberQuarters;
			}
			else {
				cout << "Invalid coin type, try again\n";
			}
		}
		else {
			cout << "Invalid, Enter Add CUPS|COLA|COINS|BILLS\n";
		}


	}
	void removeCommand(string cmd2) {  //same as the add function but removes the bills and coins instead
		if (cmd2 == "COINS" || cmd2 == "coins" || cmd2 == "Coins") {
			cout << "Enter type and amount of coins in the form, <denomination> <quantity>\n";
			getline(cin, add);
			istringstream ss(add);
			ss >> addcmd1 >> addcmd2;

			if (addcmd1 == "nickel" || addcmd1 == "5") {
				numberNickels = numberNickels - addcmd2;
			}
			else if (addcmd1 == "dime" || addcmd1 == "10") {
				numberDimes = numberDimes - addcmd2;
			}
			else if (addcmd1 == "quarter" || addcmd1 == "25") {
				numberQuarters = numberQuarters - addcmd2;
			}
			else {
				cout << "Invalid coin type, try again";
			}
		}
		else if (cmd2 == "BILLS" || cmd2 == "Bills" || cmd2 == "bills") {
			cout << "Enter type and amount of bills in the form, <denomination> <quantity>\n";
			getline(cin, add);
			istringstream ss(add);
			ss >> addcmd1 >> addcmd2;

			if (addcmd1 == "five" || addcmd1 == "5") {
				numberFiveDollarBills = numberFiveDollarBills - addcmd2;
			}
			else if (addcmd1 == "one" || addcmd1 == "1") {
				numberOneDollarBills = numberOneDollarBills - addcmd2;
			}
			else {
				cout << "Invalid bill type, try again\n";
			}
		}
	}
	void exitCommand() { //exits the propgram
		exit(0);
	}
	void lockCommand() { //locks the program and sets the mode to normal
		mode = "Normal";
		return;
	}
};
class NormalMode : public ServiceMode { //normal mode class
public:
	int userNickels = 0, userDimes = 0, userDollarBills = 0, userQuarters = 0, userFiveBills = 0;
	float amountInserted = 0;

	void printStart() {  //prints normal mode start screen
		cout << "Please Enter a command and its parameter\n(type Help for a list of commands, EXIT to Quit)";
		cout << "\n[NORMAL MODE]>";

		return;
	}

	void helpCommand() { //shows all available commands
		cout << "Commands in Normal Mode are:\n";
		cout << "Coin <value> where value is 5 10 25 nickel dime quarter";
		cout << "\nBill <value> where value is 1 5\n";
		cout << "Cola <value> where value is coke pepsi rc jolt faygo";
		cout << "Exit\n";
		cout << "Unlock [password]\n";
	}
	void coinCommand(string cmd2) {    // function where coins are inserted by the user
		if (cmd2 == "nickel" || cmd2 == "NICKEL" || cmd2 == "Nickel" || cmd2 == "5") {
			userNickels++;
			numberNickels++;
			amountInserted += .05;
		}
		else if (cmd2 == "dime" || cmd2 == "Dime" || cmd2 == "DIME" || cmd2 == "10") {
			userDimes++;
			numberDimes++;
			amountInserted += .10;
		}
		else if (cmd2 == "quarter" || cmd2 == "QUARTER" || cmd2 == "Quarter" || cmd2 == "25") {
			userQuarters++;
			numberQuarters++;
			amountInserted += .25;
		}

	}
	void billCommand(string cmd2) {   //function where bills can be inserted by the user

		if (cmd2 == "5") {          
			userFiveBills++;
			numberFiveDollarBills++;
			amountInserted += 5;
		}
		else if (cmd2 == "1") {
			userDollarBills++;
			numberOneDollarBills++;
			amountInserted += 1;
		}
		else {
			cout << "Invalid bill value type, try again";
		}

	}
	void colaCommand(string cmd2, int numberOfCoke, int cupQuantity, int numberOfPepsi, int numberOfFaygo, int numberOfJolt, int numberOfRC) {
		if (amountInserted >= .75 && cmd2 == "coke" && numberOfCoke > 0 && cupQuantity > 0) {
			cout << "Dispensing Coke\n";                                                                    //each of these parses the brand of coke entered and makes sure there is
			numberOfCoke--;                                                                                  //enough cups,soda and change inserted before dispensing.
		}
		else if (amountInserted >= .75 && cmd2 == "pepsi" && numberOfPepsi > 0 && cupQuantity > 0) {
			cout << "Dispensing Pepsi\n";
			numberOfPepsi--;
		}
		else if (amountInserted >= .75 && cmd2 == "rc" && numberOfPepsi > 0 && cupQuantity > 0) {
			cout << "Dispensing RC\n";
			numberOfRC--;
		}
		else if (amountInserted >= .75 && cmd2 == "jolt" && numberOfJolt > 0 && cupQuantity > 0) {
			cout << "Dispensing Jolt\n";
			numberOfJolt--;
		}
		else if (amountInserted >= .75 && cmd2 == "faygo" && numberOfFaygo > 0 && cupQuantity > 0) {

			cout << "Dispensing Faygo\n";
			numberOfFaygo--;

		}
		else cout << "insufficient change, cola or cups.";
	}
	void exitCommand() {//exits the program
		exit(0);
	}
};

int main() {
	ServiceMode obj1;
	NormalMode obj2;
	string password = "";
	string command = "";
	string mode = "Service";
	string cmd1, cmd2, cmd3, cmd4;

	while (true) {
		while (mode == "Service") {      // service mode where the program begins and where coins, bills and sodas are added or removed, as well as the status of the inventory 
			                              //in the machine is monitored
			obj1.printStart();//prints the initial start screen and service mode
			getline(cin, command);

			istringstream ss(command);

			ss >> cmd1 >> cmd2 >> cmd3;


			if (cmd1 == "Help" || cmd1 == "HELP" || cmd1 == "help") {  
				obj1.helpCommand();
			}
			else if (cmd1 == "Status" || cmd1 == "STATUS" || cmd1 == "status") {
				obj1.statusCommand();
			}
			else if (cmd1 == "Add" || cmd1 == "add" || cmd1 == "ADD") {
				obj1.addCommand(cmd2);
			}
			else if (cmd1 == "Remove" || cmd1 == "remove" || cmd1 == "REMOVE") {
				obj1.removeCommand(cmd2);
			}
			else if (cmd1 == "Lock" || cmd1 == "LOCK" || cmd1 == "lock") {
				password = cmd2; //sets the password
				obj1.lockCommand(); 
				mode = "Normal";
			}
			else if (command == "Exit" || command == "exit" || command == "EXIT") {
				obj1.exitCommand();
			}
			else {
				cout << "Invalid command, use Help command to see list of valid commands.";
			}
		}
		while (mode == "Normal") { // normal mode where the help, coin/ bill insert, cola choice and unlock commands
			obj2.printStart();
			getline(cin, command);

			istringstream ss(command);

			ss >> cmd1 >> cmd2 >> cmd3;

			if (cmd1 == "Help" || cmd1 == "HELP" || cmd1 == "help") {
				obj2.helpCommand();
			}
			else if (cmd1 == "COIN" || cmd1 == "Coin" || cmd1 == "coin") {
				obj2.coinCommand(cmd2);
			}
			else if (cmd1 == "BILL" || cmd1 == "bill" || cmd1 == "Bill") {
				obj2.billCommand(cmd2);
			}
			else if (cmd1 == "COLA" || cmd1 == "cola" || cmd1 == "Cola") {
				obj2.colaCommand(cmd2, obj1.numberOfCoke, obj1.cupQuantity, obj1.numberOfPepsi, obj1.numberOfFaygo, obj1.numberOfJolt, obj1.numberOfRC);
			}
			else if (cmd1 == "Unlock" || cmd1 == "unlock" || cmd1 == "Unlock") {
				if (cmd2 == password) { //unlocks the program and goes back to service mode if the password is correct.
					mode = "Service";

				}
				else {
					cout << "invalid password\n";
				}
			}
			else if (cmd1 == "EXIT" || cmd1 == "exit" || cmd1 == "Exit") {
				obj2.exitCommand();
			}
			else {
				cout << "invalid command, use help to show all commands\n";
			}
		}
	}

}
